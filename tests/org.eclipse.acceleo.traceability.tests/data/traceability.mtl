[module traceability('http://www.eclipse.org/emf/2002/Ecore')/]

[template public traceability(e : EClass) {clazzName : String = e.name; pack : EPackage = e.ePackage; root : EPackage = e.ePackage.eContainer()}]
[file (e.name.concat('.java'), false)]
['test'.isAlpha().toString().concat('test'.isAlpha().toString())/]
1. [qualifiedName(clazzName, pack.name, root.name)/]
2. [qualifiedName(e, pack, root)/]
3. [qualifiedName(e)/]
4. [qualifiedNameIterate(e)/]
5. [qualifiedNameTrimmed(e, pack, root)/]
[/file]
[/template]

[template public traceabilityAttributes(a : EAttribute)]
[file ('attributes.log', true)][a.name/] : [a.eType.name/][/file]
[/template]

[query qualifiedName(className : String, containerName : String, rootName : String) : String =
	rootName.concat('.').concat(containerName).concat('.').concat(className)
	/]
[query qualifiedName(clazz : EClass, container : EPackage, rootContainer : EPackage) : String = 
	rootContainer.name.concat('.').concat(container.name).concat('.').concat(clazz.name)
	/]
[query qualifiedName(clazz : EClass) : String =
	let rootName : String = clazz.ePackage.eContainer().oclAsType(EPackage).name,
		containerName : String = clazz.ePackage.name,
		className : String = clazz.name in
			rootName.concat('.').concat(containerName).concat('.').concat(className)
	/]
[query qualifiedNameIterate(clazz : EClass) : String =
	let qualifiedName : String = 
			let reverseAncestors : Sequence(OclAny) = clazz.ancestors()->iterate(it; result : Sequence(OclAny) = Sequence{} | result->prepend(it)) in
					reverseAncestors->iterate(current; result : String = '' | (if current <> reverseAncestors->first() then result.concat('.') else result endif).concat(current.oclAsType(ENamedElement).name)) in
			qualifiedName.concat('.').concat(clazz.name)
	/]
[query qualifiedNameTrimmed(clazz : EClass, container : EPackage, rootContainer : EPackage) : String =
	'  '.concat(rootContainer.name).concat('.').concat(container.name).concat('.').concat(getSpaceSuffixedClassName(clazz)).concat('\t  \t').concat('\t\t\n    \t').trim()
	/]
[query getSpaceSuffixedClassName(clazz : EClass) : String =
	clazz.name.concat('          ')
	/]