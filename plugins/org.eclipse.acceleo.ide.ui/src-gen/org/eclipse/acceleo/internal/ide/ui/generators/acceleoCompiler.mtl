[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2008, 2011 Obeo.<br/>
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 * @author sbegaudeau
 */]
[module acceleoCompiler('http://www.eclipse.org/acceleo/ui/acceleowizardmodel/3.1')]


[**
 * Generates the AcceleoCompiler.java file for stand alone compilation.
 * @param anAcceleoProject The acceleo project.
 */]
[template public generateElement(anAcceleoProject : AcceleoProject)]
[comment @main/]
[file ('AcceleoCompiler.java', false, 'UTF-8')]
/*******************************************************************************
 * Copyright (c) 2011 Obeo.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Obeo - initial API and implementation
 *******************************************************************************/
package org.eclipse.emf.eef.codegen.ecore;

import org.eclipse.acceleo.parser.compiler.AbstractAcceleoCompiler;
import org.eclipse.emf.common.util.BasicMonitor;
import org.eclipse.emf.common.util.Monitor;

/**
 * The Acceleo Stand Alone compiler.
 * 
 * @author <a href="mailto:stephane.begaudeau@obeo.fr">Stephane Begaudeau</a>
 * @since 3.1
 */
public class AcceleoCompiler extends AbstractAcceleoCompiler {

    /**
     * The constructor.
     */
    public AcceleoCompiler() {
        super();
    }
    
    /**
     * The entry point of the compilation.
     * 
     * @param args
     *             The arguments used in the compilation: the source folder,
     *             the output folder, a boolean indicating if we should use binary resource
     *             serialization and finally the dependencies of the project.
     */
    public static void main(String['['/][']'/] args) {
        if (args.length < 3) {
            throw new IllegalArgumentException("Missing parameters"); //$NON-NLS-1$
        }
        AcceleoCompiler acceleoCompilerHelper = new AcceleoCompiler();
        acceleoCompilerHelper.setSourceFolder(args['[0]'/]);
        acceleoCompilerHelper.setOutputFolder(args['[1]'/]);
        acceleoCompilerHelper.setBinaryResource(Boolean.valueOf(args['[2]'/]).booleanValue());
        if (args.length == 4 && args['[3]'/] != null && !"".equals(args['[3]'/])) { //$NON-NLS-1$
            acceleoCompilerHelper.setDependencies(args['[3]'/]);
        }
        acceleoCompilerHelper.doCompile(new BasicMonitor());
    }
    
    /**
     * Launches the compilation of the mtl files in the generator.
     * 
     * @see org.eclipse.acceleo.parser.compiler.AbstractAcceleoCompiler#doCompile(org.eclipse.emf.common.util.Monitor)
     */
    @Override
    public void doCompile(Monitor monitor) {
        super.doCompile(monitor);
    }
    
    /**
     * Registers the packages of the metamodels used in the generator.
     * 
     * @see org.eclipse.acceleo.parser.compiler.AbstractAcceleoCompiler#registerPackages()
     */
    @Override
    protected void registerPackages() {
        super.registerPackages();
    }
    

    /**
     * Registers the resource factories.
     * 
     * @see org.eclipse.acceleo.parser.compiler.AbstractAcceleoCompiler#registerResourceFactories()
     */
    @Override
    protected void registerResourceFactories() {
        super.registerResourceFactories();
    }
}

[/file]
[/template]
