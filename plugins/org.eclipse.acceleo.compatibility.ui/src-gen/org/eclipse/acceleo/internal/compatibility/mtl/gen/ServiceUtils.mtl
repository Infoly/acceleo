[module ServiceUtils('http://www.eclipse.org/acceleo/mt/2.6.0')/]

[query public isOperationCall(call : Call) : Boolean = if call.arguments->size() > 0 then true else let callName : String = call.name in
	callName.isEObjectService() or
	callName.isRequestService() or
	callName.isResourceService() or
	callName.isStringService() or
	callName.isSystemService() or
	callName.isXPathService() or
	callName.isENodeService() or
	callName.isContextService() or
	callName.isPropertiesService() or
	call.isScriptCall() or
	call.isServiceCall() endif/]
	
[query private isScriptCall(call : Call) : Boolean = call.ancestors()->last().allScripts()->collect(s | s.oclAsType(mt::core::Script).descriptor.name)->includes(call.name)/]
[query private isServiceCall(call : Call) : Boolean = call.ancestors()->last().allMethods()->collect(s | s.oclAsType(mt::core::Method).name)->includes(call.name)/]

[comment this has been externalized here to make use of the query's caching/]
[query private allScripts(root : OclAny) : Sequence(T) = root.eAllContents(mt::core::Script)/]
[query private allMethods(root : OclAny) : Sequence(T) = root.eAllContents(mt::core::Method)/]

[query public isEObjectService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'eAllContents', 
	'eClass',
	'eContainer',
	'eContainingFeature',
	'eContainmentFeature',
	'eContents',
	'eCrossReferences',
	'eResource',
	'eResourceName',
	'getRootContainer',
	'load'} in serviceNames->includes(callName)/]
	
[query public isRequestService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'select',
	'delete',
	'evaluate'} in serviceNames->includes(callName)/]
	
[query public isResourceService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'getFileContent',
	'getChainPath'} in serviceNames->includes(callName)/]
	
[query public isStringService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'length',
	'toUpperCase',
	'toLowerCase',
	'toU1Case',
	'toL1Case',
	'substring',
	'replaceAll',
	'replaceFirst',
	'trim',
	'startsWith',
	'endsWith',
	'equalsIgnoreCase',
	'matches',
	'charAt',
	'indexOf',
	'lastIndexOf',
	'split',
	'indentSpace',
	'indentTab'} in serviceNames->includes(callName)/]
	
[query public isSystemService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'i',
	'args'} in serviceNames->includes(callName)/]
	
[query public isXPathService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'ancestor',
	'parent',
	'self',
	'child',
	'descendant',
	'precedingSibling',
	'preceding',
	'followingSibling',
	'following'} in serviceNames->includes(callName)/]
	
[query public isENodeService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'adapt',
	'cast',
	'filter',
	'current',
	'debug',
	'trace',
	'nPut',
	'nGet',
	'nPeek',
	'nPop',
	'nPush',
	'nMinimize',
	'minimize',
	'nContains',
	'nFirst',
	'nLast',
	'nReverse',
	'reverse',
	'nSize',
	'nSort',
	'sort',
	'sep',
	'sepStr',
	'toString',
	'until'} in serviceNames->includes(callName)/]
	
[query public isContextService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'get',
	'peek',
	'pop',
	'push',
	'put'} in serviceNames->includes(callName)/]

[query public isPropertiesService(callName : String) : Boolean = let serviceNames : Sequence(String) = Sequence{
	'getBestProperty',
	'getProperty'} in serviceNames->includes(callName)/]
